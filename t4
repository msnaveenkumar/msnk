/**
 * Counts occurrences of a specific field within a specified nested node.
 *
 * @param jsonData       The JSON data as a String.
 * @param fieldName      The field name to count.
 * @param nestedNodeName The name of the nested node to search within.
 * @return The count of occurrences of the specified field within the nested node.
 */
public int getNestedFieldCount(String jsonData, String fieldName, String nestedNodeName) {
    JsonNode rootNode = parseJson(jsonData); // Parse the JSON string
    int count = 0;

    // Check if the root node has the nested node
    if (rootNode != null && rootNode.has(nestedNodeName)) {
        JsonNode nestedNode = rootNode.get(nestedNodeName);

        // If the nested node is an array, loop through each item
        if (nestedNode.isArray()) {
            for (JsonNode item : nestedNode) {
                // Check if the item contains the field and count its occurrences
                count += countFieldOccurrences(item, fieldName);
            }
        }
        // If it's not an array but an object
        else if (nestedNode.isObject()) {
            count += countFieldOccurrences(nestedNode, fieldName);
        }
    }

    return count;
}

/**
 * Recursively counts occurrences of a specific field within nested objects or arrays.
 *
 * @param node      The root JSON node to search.
 * @param fieldName The field name to count.
 * @return The total count of occurrences of the specified field within the JSON node.
 */
private int countFieldOccurrences(JsonNode node, String fieldName) {
    int count = 0;

    if (node == null) {
        return count;
    }

    // If the node contains the field directly, increase the count
    if (node.has(fieldName)) {
        count++;
    }

    // Recursively check for the field in nested objects or arrays
    if (node.isObject()) {
        Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            count += countFieldOccurrences(field.getValue(), fieldName);
        }
    } else if (node.isArray()) {
        for (JsonNode item : node) {
            count += countFieldOccurrences(item, fieldName);
        }
    }

    return count;
}
