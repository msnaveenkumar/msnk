package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

public class JsonItemCounter_New_latestnested {

    public static void main(String[] args) {
        try {
            // Path to the JSON file
            File jsonFile = new File("test.json");

            // Parse the JSON file
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(jsonFile);

            // Traverse and count items within "datasets"
            JsonNode datasetsNode = rootNode.get("datasets");
            if (datasetsNode != null && datasetsNode.isArray()) {
                for (JsonNode dataset : datasetsNode) {
                    System.out.println("Dataset Name: " + dataset.get("name").asText());

                    // Count occurrences and verify field value in different fields
                    countAndVerifyField(dataset, "reports", "catalogId", "82fed24e-053d-4023-a505-0b2e4ad8b26f");
                    countAndVerifyField(dataset, "boundaries", "geography", "Boundary Geography | Undefined");
                    countAndVerifyField(dataset, "datasetElements", "name", "SDH Autoamation_DatasetElement_01");
                    countAndVerifyField(dataset, "systemDataElements", "systemKey", "2f05ebf2-2b4f-49bd-82e2-0c5bff134073");

                    // Example of printing specific descriptions
                    printDescriptions(dataset, "description");
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Method to count occurrences of a field and verify a specific value within that field.
     *
     * @param dataset      The JSON node representing the dataset.
     * @param fieldName    The field name to be counted and verified.
     * @param valueField   The specific sub-field to check for the value.
     * @param valueToCheck The value to verify in the specified sub-field.
     */
    private static void countAndVerifyField(JsonNode dataset, String fieldName, String valueField, String valueToCheck) {
        int count = countFieldOccurrences(dataset, fieldName);
        boolean valueExists = verifyFieldValue(dataset, valueField, valueToCheck);

        System.out.println(fieldName + ": " + count + " occurrences");
        System.out.println(valueField + " with value '" + valueToCheck + "' exists: " + valueExists);
    }

    /**
     * Method to count occurrences of a specific field in a JSON node.
     *
     * @param node      The JSON node to traverse.
     * @param fieldName The field name to count.
     * @return The count of occurrences.
     */
    private static int countFieldOccurrences(JsonNode node, String fieldName) {
        if (node == null) {
            return 0;
        }

        int count = 0;

        if (node.isArray()) {
            for (JsonNode item : node) {
                count += countFieldOccurrences(item, fieldName);
            }
        } else if (node.isObject()) {
            // Check if the field exists at the current level
            if (node.has(fieldName)) {
                count += 1;  // Field found, count it
            }
            // Recursively check fields within nested objects
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                count += countFieldOccurrences(field.getValue(), fieldName);
            }
        }

        return count;
    }

    /**
     * Method to verify if a specific field contains a given value.
     *
     * @param node         The JSON node to traverse.
     * @param valueField   The field in which to check the value.
     * @param valueToCheck The value to verify.
     * @return True if the value is found, false otherwise.
     */
    private static boolean verifyFieldValue(JsonNode node, String valueField, String valueToCheck) {
        if (node == null) {
            return false;
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                if (verifyFieldValue(item, valueField, valueToCheck)) {
                    return true;
                }
            }
        } else if (node.isObject()) {
            // Check if the field exists at the current level
            if (node.has(valueField) && node.get(valueField).isTextual()) {
                return node.get(valueField).asText().equals(valueToCheck);
            }
            // Recursively check fields within nested objects
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                if (verifyFieldValue(field.getValue(), valueField, valueToCheck)) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Method to print the "description" field from any level.
     *
     * @param node      The JSON node to traverse.
     * @param fieldName The field name to print.
     */
    private static void printDescriptions(JsonNode node, String fieldName) {
        if (node == null) {
            return;
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                printDescriptions(item, fieldName);
            }
        } else if (node.isObject()) {
            // Print field if it exists at the current level
            if (node.has(fieldName)) {
                JsonNode fieldNode = node.get(fieldName);
                if (fieldNode.isTextual()) {
                    System.out.println("Found " + fieldName + ": " + fieldNode.asText());
                }
            }
            // Recursively check fields within nested objects
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                printDescriptions(field.getValue(), fieldName);
            }
        }
    }
}
