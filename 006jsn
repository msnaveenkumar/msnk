package com.qmetry.qaf.example.test;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class JsonUtility3 {

    public static void main(String[] args) {
//        try {
//            // Path to the JSON file
//            File jsonFile = new File("test.json");
//
//            // Parse the JSON file
//            ObjectMapper mapper = new ObjectMapper();
//            JsonNode rootNode = mapper.readTree(jsonFile);
//
//            // Create an instance of JsonUtility to call the non-static methods
//            JsonUtility3 jsonUtility = new JsonUtility3();
//
//            // Process the datasets node
//            System.out.println("Processing datasets:");
//            jsonUtility.processJsonNode(rootNode, "datasets");
//
//            // Count occurrences of various fields
//            System.out.println("\nCounting occurrences of different fields:");
//            jsonUtility.countItems(rootNode, "reports");
//            jsonUtility.countItems(rootNode, "boundaries");
//            jsonUtility.countItems(rootNode, "dgcDataDomains");
//            jsonUtility.countItems(rootNode, "datasetElements");
//            jsonUtility.countItems(rootNode, "upstreamDatasets");
//            jsonUtility.countItems(rootNode, "systemDataElements");
//
//            // Verify if specific catalogId exists
//            System.out.println("\nVerifying specific catalogId existence:");
//            boolean catalogExists = jsonUtility.verifyFieldValue(rootNode, "catalogId", "82fed24e-053d-4023-a505-0b2e4ad8b26f");
//            System.out.println("Report with catalogId '82fed24e-053d-4023-a505-0b2e4ad8b26f' exists: " + catalogExists);
//
//            // Extract all catalog IDs
//            System.out.println("\nExtracting all catalog IDs:");
//            List<String> catalogIds = jsonUtility.extractFieldValues(rootNode, "catalogId");
//            System.out.println("All catalogIds: " + catalogIds);
//
//            // Check if a field exists anywhere in the structure
//            System.out.println("\nChecking field existence:");
//            boolean hasBoundaries = jsonUtility.fieldExists(rootNode, "boundaries");
//            System.out.println("Boundaries field exists: " + hasBoundaries);
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        


                try {
                    // Example JSON string
                    String jsonString = "{\n" +
                            "    \"datasets\": [\n" +
                            "        {\n" +
                            "            \"name\": \"Test Automation_Dataset_01\",\n" +
                            "            \"reports\": [\n" +
                            "                { \"catalogId\": \"82fed24e-053d-4023-a505-0b2e4ad8b26f\" },\n" +
                            "                { \"catalogId\": \"2c779268-c730-40db-9cfc-6a8d79892a43\" }\n" +
                            "            ],\n" +
                            "            \"boundaries\": {\n" +
                            "                \"geography\": \"Boundary Geography | Undefined\",\n" +
                            "                \"Product\": \"(Finance) Asset-Backed Securities\"\n" +
                            "            }\n" +
                            "        }\n" +
                            "    ]\n" +
                            "}";

                    // Parse the JSON string
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode rootNode = mapper.readTree(jsonString);

                    // Create an instance of JsonUtility to call non-static methods
                    JsonUtility jsonUtility = new JsonUtility();

                    // Example: Count occurrences of "reports" in a specific dataset
                    System.out.println("Counting 'reports' in 'Test Automation_Dataset_01':");
                    jsonUtility.countItems(rootNode, "Test Automation_Dataset_01", "reports");

                    // Example: Verify if a specific "catalogId" exists within "Test Automation_Dataset_01"
                    System.out.println("\nVerifying catalogId '82fed24e-053d-4023-a505-0b2e4ad8b26f' in 'Test Automation_Dataset_01':");
                    boolean catalogExists = jsonUtility.verifyFieldValue(rootNode, "Test Automation_Dataset_01", "catalogId", "82fed24e-053d-4023-a505-0b2e4ad8b26f");
                    System.out.println("Catalog ID exists: " + catalogExists);

                    // Example: Extract all catalogIds from "Test Automation_Dataset_01"
                    System.out.println("\nExtracting all catalogIds from 'Test Automation_Dataset_01':");
                    List<String> catalogIds = jsonUtility.extractFieldValues(rootNode, "Test Automation_Dataset_01", "catalogId");
                    System.out.println("All catalogIds: " + catalogIds);

                    // Example: Check if the "boundaries" field exists within "Test Automation_Dataset_01"
                    System.out.println("\nChecking if 'boundaries' exists in 'Test Automation_Dataset_01':");
                    boolean hasBoundaries = jsonUtility.fieldExists(rootNode, "Test Automation_Dataset_01", "boundaries");
                    System.out.println("Boundaries field exists: " + hasBoundaries);

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            // Other methods remain unchanged (findDatasetByName, countItems, countFieldOccurrences, verifyFieldValue, extractFieldValues, fieldExists, etc.)
        

    

    /**
     * Process the root JSON node and call various utility methods for specified fields.
     *
     * @param rootNode      the root JSON node
     * @param rootFieldName the field name to start processing from
     */
    public void processJsonNode(JsonNode rootNode, String rootFieldName) {
        JsonNode targetNode = rootNode.get(rootFieldName);

        if (targetNode != null && targetNode.isArray()) {
            for (JsonNode node : targetNode) {
                System.out.println("Processing node for field: " + rootFieldName);
                System.out.println(node.toPrettyString());
            }
        } else {
            System.out.println(rootFieldName + " field is not an array or does not exist.");
        }
    }

    public void countItems(JsonNode node, String fieldName) {
        int count = countFieldOccurrences(node, fieldName);
        System.out.println(fieldName + ": " + count + " occurrences");
    }

    public int countFieldOccurrences(JsonNode node, String fieldName) {
        if (node == null) {
            return 0;
        }

        int count = 0;

        if (node.isArray()) {
            for (JsonNode item : node) {
                count += countFieldOccurrences(item, fieldName);
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) {
                count += 1;
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                count += countFieldOccurrences(field.getValue(), fieldName);
            }
        }

        return count;
    }

    public boolean verifyFieldValue(JsonNode node, String fieldName, String expectedValue) {
        if (node == null) {
            return false;
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                if (verifyFieldValue(item, fieldName, expectedValue)) {
                    return true;
                }
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) {
                JsonNode fieldNode = node.get(fieldName);
                if (fieldNode.isTextual() && fieldNode.asText().equals(expectedValue)) {
                    return true;
                }
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                if (verifyFieldValue(field.getValue(), fieldName, expectedValue)) {
                    return true;
                }
            }
        }

        return false;
    }

    public List<String> extractFieldValues(JsonNode node, String fieldName) {
        List<String> values = new ArrayList<>();
        extractFieldValuesRecursively(node, fieldName, values);
        return values;
    }

    public void extractFieldValuesRecursively(JsonNode node, String fieldName, List<String> values) {
        if (node == null) {
            return;
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                extractFieldValuesRecursively(item, fieldName, values);
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) {
                JsonNode fieldNode = node.get(fieldName);
                if (fieldNode.isTextual()) {
                    values.add(fieldNode.asText());
                }
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                extractFieldValuesRecursively(field.getValue(), fieldName, values);
            }
        }
    }

    public boolean fieldExists(JsonNode node, String fieldName) {
        if (node == null) {
            return false;
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                if (fieldExists(item, fieldName)) {
                    return true;
                }
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) {
                return true;
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                if (fieldExists(field.getValue(), fieldName)) {
                    return true;
                }
            }
        }

        return false;
    }
}
