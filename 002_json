package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class JsonUtility {

    public static void main(String[] args) {
        try {
            // Path to the JSON file
            File jsonFile = new File("test.json");

            // Parse the JSON file
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(jsonFile);

            // Create an instance of JsonUtility to call non-static methods
            JsonUtility jsonUtility = new JsonUtility();

            // Access the first dataset from the 'datasets' node
            JsonNode datasetNode = rootNode.path("datasets").get(0);

            // Count occurrences of "reports" in the dataset
            System.out.println("Counting 'reports' in Test Automation_Dataset_01:");
            jsonUtility.countItems(datasetNode, "reports");

            // Verify if a specific "catalogId" exists within the dataset
            System.out.println("\nVerifying catalogId '82fed24e-053d-4023-a505-0b2e4ad8b26f':");
            boolean catalogExists = jsonUtility.verifyFieldValue(datasetNode, "catalogId", "82fed24e-053d-4023-a505-0b2e4ad8b26f");
            System.out.println("Catalog ID exists: " + catalogExists);

            // Extract all catalogIds from the dataset
            System.out.println("\nExtracting all catalogIds:");
            List<String> catalogIds = jsonUtility.extractFieldValues(datasetNode, "catalogId");
            System.out.println("All catalogIds: " + catalogIds);

            // Check if the "boundaries" field exists in the dataset
            System.out.println("\nChecking if 'boundaries' exists:");
            boolean hasBoundaries = jsonUtility.fieldExists(datasetNode, "boundaries");
            System.out.println("Boundaries field exists: " + hasBoundaries);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Count the occurrences of a specified field in a JSON node and print the count.
     * Recursively navigates nested objects and arrays.
     */
    public void countItems(JsonNode node, String fieldName) {
        int count = countFieldOccurrences(node, fieldName);
        System.out.println(fieldName + ": " + count + " occurrences");
    }

    /**
     * Recursively count the occurrences of a field in a JSON node.
     */
    private int countFieldOccurrences(JsonNode node, String fieldName) {
        if (node == null) return 0;

        int count = 0;

        if (node.isArray()) {
            for (JsonNode item : node) {
                count += countFieldOccurrences(item, fieldName);
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) count++;

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                count += countFieldOccurrences(fields.next().getValue(), fieldName);
            }
        }

        return count;
    }

    /**
     * Verify if a specific field contains a given value in the JSON structure.
     * Works recursively to find the field in nested objects/arrays.
     */
    public boolean verifyFieldValue(JsonNode node, String fieldName, String expectedValue) {
        if (node == null) return false;

        if (node.isArray()) {
            for (JsonNode item : node) {
                if (verifyFieldValue(item, fieldName, expectedValue)) return true;
            }
        } else if (node.isObject()) {
            if (node.has(fieldName) && node.get(fieldName).asText().equals(expectedValue)) {
                return true;
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                if (verifyFieldValue(fields.next().getValue(), fieldName, expectedValue)) return true;
            }
        }

        return false;
    }

    /**
     * Extract all values for a specified field from the JSON structure.
     * Works recursively through nested objects and arrays.
     */
    public List<String> extractFieldValues(JsonNode node, String fieldName) {
        List<String> values = new ArrayList<>();
        extractFieldValuesRecursively(node, fieldName, values);
        return values;
    }

    /**
     * Recursively extract field values and add them to a list.
     */
    private void extractFieldValuesRecursively(JsonNode node, String fieldName, List<String> values) {
        if (node == null) return;

        if (node.isArray()) {
            for (JsonNode item : node) {
                extractFieldValuesRecursively(item, fieldName, values);
            }
        } else if (node.isObject()) {
            if (node.has(fieldName) && node.get(fieldName).isTextual()) {
                values.add(node.get(fieldName).asText());
            }

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                extractFieldValuesRecursively(fields.next().getValue(), fieldName, values);
            }
        }
    }

    /**
     * Check if a specified field exists in the JSON structure.
     * Works recursively to check nested objects/arrays.
     */
    public boolean fieldExists(JsonNode node, String fieldName) {
        if (node == null) return false;

        if (node.isArray()) {
            for (JsonNode item : node) {
                if (fieldExists(item, fieldName)) return true;
            }
        } else if (node.isObject()) {
            if (node.has(fieldName)) return true;

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                if (fieldExists(fields.next().getValue(), fieldName)) return true;
            }
        }

        return false;
    }
}
